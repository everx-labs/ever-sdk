{
  "version": "1.0.0",
  "modules": [
    {
      "name": "client",
      "summary": " Provides information about library.",
      "description": " Provides information about library.",
      "types": [
        {
          "name": "ClientError",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "code",
              "type": "Number",
              "summary": null,
              "description": null
            },
            {
              "name": "message",
              "type": "String",
              "summary": null,
              "description": null
            },
            {
              "name": "data",
              "type": "Ref",
              "ref_name": "Value",
              "summary": null,
              "description": null
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ClientConfig",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "network",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "NetworkConfig"
              },
              "summary": null,
              "description": null
            },
            {
              "name": "crypto",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "CryptoConfig"
              },
              "summary": null,
              "description": null
            },
            {
              "name": "abi",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "AbiConfig"
              },
              "summary": null,
              "description": null
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "NetworkConfig",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "server_address",
              "type": "Optional",
              "optional_inner": {
                "type": "String"
              },
              "summary": null,
              "description": null
            },
            {
              "name": "network_retries_count",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": null,
              "description": null
            },
            {
              "name": "message_retries_count",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": null,
              "description": null
            },
            {
              "name": "message_processing_timeout",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": null,
              "description": null
            },
            {
              "name": "wait_for_timeout",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": null,
              "description": null
            },
            {
              "name": "out_of_sync_threshold",
              "type": "Optional",
              "optional_inner": {
                "type": "BigInt"
              },
              "summary": null,
              "description": null
            },
            {
              "name": "access_key",
              "type": "Optional",
              "optional_inner": {
                "type": "String"
              },
              "summary": null,
              "description": null
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "CryptoConfig",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "mnemonic_dictionary",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": null,
              "description": null
            },
            {
              "name": "mnemonic_word_count",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": null,
              "description": null
            },
            {
              "name": "hdkey_derivation_path",
              "type": "Optional",
              "optional_inner": {
                "type": "String"
              },
              "summary": null,
              "description": null
            },
            {
              "name": "hdkey_compliant",
              "type": "Optional",
              "optional_inner": {
                "type": "Boolean"
              },
              "summary": null,
              "description": null
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "AbiConfig",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "workchain",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": null,
              "description": null
            },
            {
              "name": "message_expiration_timeout",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": null,
              "description": null
            },
            {
              "name": "message_expiration_timeout_grow_factor",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": null,
              "description": null
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfGetApiReference",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "api",
              "type": "Ref",
              "ref_name": "API",
              "summary": null,
              "description": null
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfVersion",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "version",
              "type": "String",
              "summary": " Core Library version",
              "description": " Core Library version"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfBuildInfo",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "build_info",
              "type": "Ref",
              "ref_name": "Value",
              "summary": null,
              "description": null
            }
          ],
          "summary": null,
          "description": null
        }
      ],
      "functions": [
        {
          "name": "get_api_reference",
          "summary": " Returns Core Library API reference",
          "description": " Returns Core Library API reference",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfGetApiReference"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "version",
          "summary": " Returns Core Library version",
          "description": " Returns Core Library version",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfVersion"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "build_info",
          "summary": null,
          "description": null,
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfBuildInfo"
              }
            ]
          },
          "errors": null
        }
      ]
    },
    {
      "name": "crypto",
      "summary": " Crypto functions.",
      "description": " Crypto functions.",
      "types": [
        {
          "name": "SigningBoxHandle",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "",
              "type": "Number",
              "summary": null,
              "description": null
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfFactorize",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "composite",
              "type": "String",
              "summary": " Hexadecimal representation of u64 composite number.",
              "description": " Hexadecimal representation of u64 composite number."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfFactorize",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "factors",
              "type": "Array",
              "array_item": {
                "type": "String"
              },
              "summary": " Two factors of composite or empty if composite can't be factorized.",
              "description": " Two factors of composite or empty if composite can't be factorized."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfModularPower",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "base",
              "type": "String",
              "summary": " `base` argument of calculation.",
              "description": " `base` argument of calculation."
            },
            {
              "name": "exponent",
              "type": "String",
              "summary": " `exponent` argument of calculation.",
              "description": " `exponent` argument of calculation."
            },
            {
              "name": "modulus",
              "type": "String",
              "summary": " `modulus` argument of calculation.",
              "description": " `modulus` argument of calculation."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfModularPower",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "modular_power",
              "type": "String",
              "summary": " Result of modular exponentiation",
              "description": " Result of modular exponentiation"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfTonCrc16",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "data",
              "type": "String",
              "summary": " Input data for CRC calculation. Encoded with `base64`.",
              "description": " Input data for CRC calculation. Encoded with `base64`."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfTonCrc16",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "crc",
              "type": "Number",
              "summary": " Calculated CRC for input data.",
              "description": " Calculated CRC for input data."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfGenerateRandomBytes",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "length",
              "type": "Number",
              "summary": " Size of random byte array.",
              "description": " Size of random byte array."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfGenerateRandomBytes",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "bytes",
              "type": "String",
              "summary": " Generated bytes encoded in `base64`.",
              "description": " Generated bytes encoded in `base64`."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfConvertPublicKeyToTonSafeFormat",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "public_key",
              "type": "String",
              "summary": " Public key - 64 symbols hex string",
              "description": " Public key - 64 symbols hex string"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfConvertPublicKeyToTonSafeFormat",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "ton_public_key",
              "type": "String",
              "summary": " Public key represented in TON safe format. ",
              "description": " Public key represented in TON safe format. "
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "KeyPair",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "public",
              "type": "String",
              "summary": " Public key - 64 symbols hex string",
              "description": " Public key - 64 symbols hex string"
            },
            {
              "name": "secret",
              "type": "String",
              "summary": " Private key - u64 symbols hex string",
              "description": " Private key - u64 symbols hex string"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfSign",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "unsigned",
              "type": "String",
              "summary": " Data that must be signed encoded in `base64`.",
              "description": " Data that must be signed encoded in `base64`."
            },
            {
              "name": "keys",
              "type": "Ref",
              "ref_name": "KeyPair",
              "summary": " Sign keys.",
              "description": " Sign keys."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfSign",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "signed",
              "type": "String",
              "summary": " Signed data combined with signature encoded in `base64`.",
              "description": " Signed data combined with signature encoded in `base64`."
            },
            {
              "name": "signature",
              "type": "String",
              "summary": " Signature encoded in `hex`.",
              "description": " Signature encoded in `hex`."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfVerifySignature",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "signed",
              "type": "String",
              "summary": " Signed data that must be verified encoded in `base64`.",
              "description": " Signed data that must be verified encoded in `base64`."
            },
            {
              "name": "public",
              "type": "String",
              "summary": " Signer's public key - 64 symbols hex string",
              "description": " Signer's public key - 64 symbols hex string"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfVerifySignature",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "unsigned",
              "type": "String",
              "summary": " Unsigned data encoded in `base64`.",
              "description": " Unsigned data encoded in `base64`."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfHash",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "data",
              "type": "String",
              "summary": " Input data for hash calculation. Encoded with `base64`.",
              "description": " Input data for hash calculation. Encoded with `base64`."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfHash",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "hash",
              "type": "String",
              "summary": " Hash of input `data`. Encoded with 'hex'.",
              "description": " Hash of input `data`. Encoded with 'hex'."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfScrypt",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "password",
              "type": "String",
              "summary": " The password bytes to be hashed.",
              "description": " The password bytes to be hashed.\n Must be encoded with `base64`."
            },
            {
              "name": "salt",
              "type": "String",
              "summary": " A salt bytes that modifies the hash to protect against Rainbow table attacks.",
              "description": " A salt bytes that modifies the hash to protect against Rainbow table attacks.\n Must be encoded with `base64`."
            },
            {
              "name": "log_n",
              "type": "Number",
              "summary": " CPU/memory cost parameter",
              "description": " CPU/memory cost parameter"
            },
            {
              "name": "r",
              "type": "Number",
              "summary": " The block size parameter, which fine-tunes sequential memory read size and performance.",
              "description": " The block size parameter, which fine-tunes sequential memory read size and performance."
            },
            {
              "name": "p",
              "type": "Number",
              "summary": " Parallelization parameter.",
              "description": " Parallelization parameter."
            },
            {
              "name": "dk_len",
              "type": "Number",
              "summary": " Intended output length in octets of the derived key.",
              "description": " Intended output length in octets of the derived key."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfScrypt",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "key",
              "type": "String",
              "summary": " Derived key. Encoded with `hex`.",
              "description": " Derived key. Encoded with `hex`."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfNaclSignKeyPairFromSecret",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "secret",
              "type": "String",
              "summary": " Secret key - unprefixed 0-padded to 64 symbols hex string ",
              "description": " Secret key - unprefixed 0-padded to 64 symbols hex string "
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfNaclSign",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "unsigned",
              "type": "String",
              "summary": " Data that must be signed encoded in `base64`.",
              "description": " Data that must be signed encoded in `base64`."
            },
            {
              "name": "secret",
              "type": "String",
              "summary": " Signer's secret key - unprefixed 0-padded to 64 symbols hex string ",
              "description": " Signer's secret key - unprefixed 0-padded to 64 symbols hex string "
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfNaclSign",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "signed",
              "type": "String",
              "summary": " Signed data, encoded in `base64`.",
              "description": " Signed data, encoded in `base64`."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfNaclSignOpen",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "signed",
              "type": "String",
              "summary": " Signed data that must be unsigned. Encoded with `base64`.",
              "description": " Signed data that must be unsigned. Encoded with `base64`."
            },
            {
              "name": "public",
              "type": "String",
              "summary": " Signer's public key - unprefixed 0-padded to 64 symbols hex string ",
              "description": " Signer's public key - unprefixed 0-padded to 64 symbols hex string "
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfNaclSignOpen",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "unsigned",
              "type": "String",
              "summary": " Unsigned data, encoded in `base64`.",
              "description": " Unsigned data, encoded in `base64`."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfNaclSignDetached",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "signature",
              "type": "String",
              "summary": " Signature encoded in `hex`.",
              "description": " Signature encoded in `hex`."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfNaclBoxKeyPairFromSecret",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "secret",
              "type": "String",
              "summary": " Secret key - unprefixed 0-padded to 64 symbols hex string ",
              "description": " Secret key - unprefixed 0-padded to 64 symbols hex string "
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfNaclBox",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "decrypted",
              "type": "String",
              "summary": " Data that must be encrypted encoded in `base64`.",
              "description": " Data that must be encrypted encoded in `base64`."
            },
            {
              "name": "nonce",
              "type": "String",
              "summary": " Nonce, encoded in `hex`",
              "description": " Nonce, encoded in `hex`"
            },
            {
              "name": "their_public",
              "type": "String",
              "summary": " Receiver's public key - unprefixed 0-padded to 64 symbols hex string ",
              "description": " Receiver's public key - unprefixed 0-padded to 64 symbols hex string "
            },
            {
              "name": "secret",
              "type": "String",
              "summary": " Sender's private key - unprefixed 0-padded to 64 symbols hex string ",
              "description": " Sender's private key - unprefixed 0-padded to 64 symbols hex string "
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfNaclBox",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "encrypted",
              "type": "String",
              "summary": " Encrypted data encoded in `base64`.",
              "description": " Encrypted data encoded in `base64`."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfNaclBoxOpen",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "encrypted",
              "type": "String",
              "summary": " Data that must be decrypted. Encoded with `base64`.",
              "description": " Data that must be decrypted. Encoded with `base64`."
            },
            {
              "name": "nonce",
              "type": "String",
              "summary": null,
              "description": null
            },
            {
              "name": "their_public",
              "type": "String",
              "summary": " Sender's public key - unprefixed 0-padded to 64 symbols hex string ",
              "description": " Sender's public key - unprefixed 0-padded to 64 symbols hex string "
            },
            {
              "name": "secret",
              "type": "String",
              "summary": " Receiver's private key - unprefixed 0-padded to 64 symbols hex string ",
              "description": " Receiver's private key - unprefixed 0-padded to 64 symbols hex string "
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfNaclBoxOpen",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "decrypted",
              "type": "String",
              "summary": " Decrypted data encoded in `base64`.",
              "description": " Decrypted data encoded in `base64`."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfNaclSecretBox",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "decrypted",
              "type": "String",
              "summary": " Data that must be encrypted. Encoded with `base64`.",
              "description": " Data that must be encrypted. Encoded with `base64`."
            },
            {
              "name": "nonce",
              "type": "String",
              "summary": " Nonce in `hex`",
              "description": " Nonce in `hex`"
            },
            {
              "name": "key",
              "type": "String",
              "summary": " Secret key - unprefixed 0-padded to 64 symbols hex string ",
              "description": " Secret key - unprefixed 0-padded to 64 symbols hex string "
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfNaclSecretBoxOpen",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "encrypted",
              "type": "String",
              "summary": " Data that must be decrypted. Encoded with `base64`.",
              "description": " Data that must be decrypted. Encoded with `base64`."
            },
            {
              "name": "nonce",
              "type": "String",
              "summary": " Nonce in `hex`",
              "description": " Nonce in `hex`"
            },
            {
              "name": "key",
              "type": "String",
              "summary": " Public key - unprefixed 0-padded to 64 symbols hex string ",
              "description": " Public key - unprefixed 0-padded to 64 symbols hex string "
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfMnemonicWords",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "dictionary",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": " Dictionary identifier",
              "description": " Dictionary identifier"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfMnemonicWords",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "words",
              "type": "String",
              "summary": " The list of mnemonic words",
              "description": " The list of mnemonic words"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfMnemonicFromRandom",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "dictionary",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": " Dictionary identifier",
              "description": " Dictionary identifier"
            },
            {
              "name": "word_count",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": " Mnemonic word count",
              "description": " Mnemonic word count"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfMnemonicFromRandom",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "phrase",
              "type": "String",
              "summary": " String of mnemonic words",
              "description": " String of mnemonic words"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfMnemonicFromEntropy",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "entropy",
              "type": "String",
              "summary": " Entropy bytes. Hex encoded.",
              "description": " Entropy bytes. Hex encoded."
            },
            {
              "name": "dictionary",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": " Dictionary identifier",
              "description": " Dictionary identifier"
            },
            {
              "name": "word_count",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": " Mnemonic word count",
              "description": " Mnemonic word count"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfMnemonicFromEntropy",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "phrase",
              "type": "String",
              "summary": " Phrase",
              "description": " Phrase"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfMnemonicVerify",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "phrase",
              "type": "String",
              "summary": " Phrase",
              "description": " Phrase"
            },
            {
              "name": "dictionary",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": " Dictionary identifier",
              "description": " Dictionary identifier"
            },
            {
              "name": "word_count",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": " Word count",
              "description": " Word count"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfMnemonicVerify",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "valid",
              "type": "Boolean",
              "summary": " Flag indicating the mnemonic is valid or not",
              "description": " Flag indicating the mnemonic is valid or not"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfMnemonicDeriveSignKeys",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "phrase",
              "type": "String",
              "summary": " Phrase",
              "description": " Phrase"
            },
            {
              "name": "path",
              "type": "Optional",
              "optional_inner": {
                "type": "String"
              },
              "summary": " Derivation path, for instance \"m/44'/396'/0'/0/0\"",
              "description": " Derivation path, for instance \"m/44'/396'/0'/0/0\""
            },
            {
              "name": "dictionary",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": " Dictionary identifier",
              "description": " Dictionary identifier"
            },
            {
              "name": "word_count",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": " Word count",
              "description": " Word count"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfHDKeyXPrvFromMnemonic",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "phrase",
              "type": "String",
              "summary": " String with seed phrase",
              "description": " String with seed phrase"
            },
            {
              "name": "dictionary",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": " Dictionary identifier",
              "description": " Dictionary identifier"
            },
            {
              "name": "word_count",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": " Mnemonic word count",
              "description": " Mnemonic word count"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfHDKeyXPrvFromMnemonic",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "xprv",
              "type": "String",
              "summary": " Serialized extended master private key",
              "description": " Serialized extended master private key"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfHDKeyDeriveFromXPrv",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "xprv",
              "type": "String",
              "summary": " Serialized extended private key",
              "description": " Serialized extended private key"
            },
            {
              "name": "child_index",
              "type": "Number",
              "summary": " Child index (see BIP-0032)",
              "description": " Child index (see BIP-0032)"
            },
            {
              "name": "hardened",
              "type": "Boolean",
              "summary": " Indicates the derivation of hardened/not-hardened key (see BIP-0032)",
              "description": " Indicates the derivation of hardened/not-hardened key (see BIP-0032)"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfHDKeyDeriveFromXPrv",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "xprv",
              "type": "String",
              "summary": " Serialized extended private key",
              "description": " Serialized extended private key"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfHDKeyDeriveFromXPrvPath",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "xprv",
              "type": "String",
              "summary": " Serialized extended private key",
              "description": " Serialized extended private key"
            },
            {
              "name": "path",
              "type": "String",
              "summary": " Derivation path, for instance \"m/44'/396'/0'/0/0\"",
              "description": " Derivation path, for instance \"m/44'/396'/0'/0/0\""
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfHDKeyDeriveFromXPrvPath",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "xprv",
              "type": "String",
              "summary": " Derived serialized extended private key",
              "description": " Derived serialized extended private key"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfHDKeySecretFromXPrv",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "xprv",
              "type": "String",
              "summary": " Serialized extended private key",
              "description": " Serialized extended private key"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfHDKeySecretFromXPrv",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "secret",
              "type": "String",
              "summary": " Private key - 64 symbols hex string",
              "description": " Private key - 64 symbols hex string"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfHDKeyPublicFromXPrv",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "xprv",
              "type": "String",
              "summary": " Serialized extended private key",
              "description": " Serialized extended private key"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfHDKeyPublicFromXPrv",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "public",
              "type": "String",
              "summary": " Public key - 64 symbols hex string",
              "description": " Public key - 64 symbols hex string"
            }
          ],
          "summary": null,
          "description": null
        }
      ],
      "functions": [
        {
          "name": "factorize",
          "summary": "Integer factorization",
          "description": " Performs prime factorization – decomposition of a composite number\n into a product of smaller prime integers (factors).\n See [https://en.wikipedia.org/wiki/Integer_factorization]",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfFactorize",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfFactorize"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "modular_power",
          "summary": "Modular exponentiation",
          "description": " Performs modular exponentiation for big integers (`base`^`exponent` mod `modulus`).\n See [https://en.wikipedia.org/wiki/Modular_exponentiation]",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfModularPower",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfModularPower"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "ton_crc16",
          "summary": " Calculates CRC16 using TON algorithm.",
          "description": " Calculates CRC16 using TON algorithm.",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfTonCrc16",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfTonCrc16"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "generate_random_bytes",
          "summary": " Generates random byte array of the specified length and returns it in `base64` format",
          "description": " Generates random byte array of the specified length and returns it in `base64` format",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfGenerateRandomBytes",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfGenerateRandomBytes"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "convert_public_key_to_ton_safe_format",
          "summary": " Converts public key to ton safe_format",
          "description": " Converts public key to ton safe_format",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfConvertPublicKeyToTonSafeFormat",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfConvertPublicKeyToTonSafeFormat"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "generate_random_sign_keys",
          "summary": " Generates random ed25519 key pair.",
          "description": " Generates random ed25519 key pair.",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "KeyPair"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "sign",
          "summary": " Signs a data using the provided keys.",
          "description": " Signs a data using the provided keys.",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfSign",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfSign"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "verify_signature",
          "summary": " Verifies signed data using the provided public key.",
          "description": " Verifies signed data using the provided public key.\n Raises error if verification is failed.",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfVerifySignature",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfVerifySignature"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "sha256",
          "summary": " Calculates SHA256 hash of the specified data.",
          "description": " Calculates SHA256 hash of the specified data.",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfHash",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfHash"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "sha512",
          "summary": " Calculates SHA512 hash of the specified data.",
          "description": " Calculates SHA512 hash of the specified data.",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfHash",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfHash"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "scrypt",
          "summary": "Perform `scrypt` encryption",
          "description": " Derives key from `password` and `key` using `scrypt` algorithm.\n See [https://en.wikipedia.org/wiki/Scrypt].\n\n # Arguments\n - `log_n` - The log2 of the Scrypt parameter `N`\n - `r` - The Scrypt parameter `r`\n - `p` - The Scrypt parameter `p`\n # Conditions\n - `log_n` must be less than `64`\n - `r` must be greater than `0` and less than or equal to `4294967295`\n - `p` must be greater than `0` and less than `4294967295`\n # Recommended values sufficient for most use-cases\n - `log_n = 15` (`n = 32768`)\n - `r = 8`\n - `p = 1`",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfScrypt",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfScrypt"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "nacl_sign_keypair_from_secret_key",
          "summary": " Generates a key pair for signing from the secret key",
          "description": " Generates a key pair for signing from the secret key",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfNaclSignKeyPairFromSecret",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "KeyPair"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "nacl_sign",
          "summary": " Signs data using the signer's secret key.",
          "description": " Signs data using the signer's secret key.",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfNaclSign",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfNaclSign"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "nacl_sign_open",
          "summary": null,
          "description": null,
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfNaclSignOpen",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfNaclSignOpen"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "nacl_sign_detached",
          "summary": null,
          "description": null,
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfNaclSign",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfNaclSignDetached"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "nacl_box_keypair",
          "summary": null,
          "description": null,
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "KeyPair"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "nacl_box_keypair_from_secret_key",
          "summary": " Generates key pair from a secret key",
          "description": " Generates key pair from a secret key",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfNaclBoxKeyPairFromSecret",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "KeyPair"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "nacl_box",
          "summary": " Public key authenticated encryption",
          "description": " Public key authenticated encryption\n\n Encrypt and authenticate a message using the senders secret key, the recievers public\n key, and a nonce. ",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfNaclBox",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfNaclBox"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "nacl_box_open",
          "summary": " Decrypt and verify the cipher text using the recievers secret key, the senders public",
          "description": " Decrypt and verify the cipher text using the recievers secret key, the senders public\n key, and the nonce.",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfNaclBoxOpen",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfNaclBoxOpen"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "nacl_secret_box",
          "summary": " Encrypt and authenticate message using nonce and secret key.",
          "description": " Encrypt and authenticate message using nonce and secret key.",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfNaclSecretBox",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfNaclBox"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "nacl_secret_box_open",
          "summary": " Decrypts and verifies cipher text using `nonce` and secret `key`.",
          "description": " Decrypts and verifies cipher text using `nonce` and secret `key`.",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfNaclSecretBoxOpen",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfNaclBoxOpen"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "mnemonic_words",
          "summary": " Prints the list of words from the specified dictionary",
          "description": " Prints the list of words from the specified dictionary",
          "params": [
            {
              "name": "context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfMnemonicWords",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfMnemonicWords"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "mnemonic_from_random",
          "summary": "Generates a random mnemonic",
          "description": " Generates a random mnemonic from the specified dictionary and word count",
          "params": [
            {
              "name": "context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfMnemonicFromRandom",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfMnemonicFromRandom"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "mnemonic_from_entropy",
          "summary": "Generates mnemonic from the specified entropy",
          "description": " Generates mnemonic from pre-generated entropy",
          "params": [
            {
              "name": "context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfMnemonicFromEntropy",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfMnemonicFromEntropy"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "mnemonic_verify",
          "summary": "Validates a mnemonic phrase",
          "description": " The phrase supplied will be checked for word length and validated according to the checksum\n specified in BIP0039.",
          "params": [
            {
              "name": "context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfMnemonicVerify",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfMnemonicVerify"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "mnemonic_derive_sign_keys",
          "summary": "Derives a key pair for signing from the seed phrase",
          "description": " Validates the seed phrase, generates master key and then derives\n the key pair from the master key and the specified path",
          "params": [
            {
              "name": "context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfMnemonicDeriveSignKeys",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "KeyPair"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "hdkey_xprv_from_mnemonic",
          "summary": " Generates an extended master private key that will be the root for all the derived keys",
          "description": " Generates an extended master private key that will be the root for all the derived keys",
          "params": [
            {
              "name": "context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfHDKeyXPrvFromMnemonic",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfHDKeyXPrvFromMnemonic"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "hdkey_derive_from_xprv",
          "summary": " Returns extended private key derived from the specified extended private key and child index",
          "description": " Returns extended private key derived from the specified extended private key and child index",
          "params": [
            {
              "name": "context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfHDKeyDeriveFromXPrv",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfHDKeyDeriveFromXPrv"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "hdkey_derive_from_xprv_path",
          "summary": " Derives the exented private key from the specified key and path",
          "description": " Derives the exented private key from the specified key and path",
          "params": [
            {
              "name": "context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfHDKeyDeriveFromXPrvPath",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfHDKeyDeriveFromXPrvPath"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "hdkey_secret_from_xprv",
          "summary": " Extracts the private key from the serialized extended private key",
          "description": " Extracts the private key from the serialized extended private key",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfHDKeySecretFromXPrv",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfHDKeySecretFromXPrv"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "hdkey_public_from_xprv",
          "summary": " Extracts the public key from the serialized extended private key",
          "description": " Extracts the public key from the serialized extended private key",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfHDKeyPublicFromXPrv",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfHDKeyPublicFromXPrv"
              }
            ]
          },
          "errors": null
        }
      ]
    },
    {
      "name": "abi",
      "summary": " Provides message encoding and decoding according to the ABI",
      "description": " Provides message encoding and decoding according to the ABI\n specification.",
      "types": [
        {
          "name": "Abi",
          "type": "EnumOfTypes",
          "enum_types": [
            {
              "name": "Serialized",
              "type": "Struct",
              "struct_fields": [
                {
                  "name": "",
                  "type": "Ref",
                  "ref_name": "AbiContract",
                  "summary": null,
                  "description": null
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "Handle",
              "type": "Struct",
              "struct_fields": [
                {
                  "name": "",
                  "type": "Ref",
                  "ref_name": "AbiHandle",
                  "summary": null,
                  "description": null
                }
              ],
              "summary": null,
              "description": null
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "AbiHandle",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "",
              "type": "Number",
              "summary": null,
              "description": null
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "FunctionHeader",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "expire",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": " Message expiration time in seconds.",
              "description": " Message expiration time in seconds."
            },
            {
              "name": "time",
              "type": "Optional",
              "optional_inner": {
                "type": "BigInt"
              },
              "summary": " Message creation time in milliseconds.",
              "description": " Message creation time in milliseconds."
            },
            {
              "name": "pubkey",
              "type": "Optional",
              "optional_inner": {
                "type": "String"
              },
              "summary": " Public key used to sign message. Encoded with `hex`.",
              "description": " Public key used to sign message. Encoded with `hex`."
            }
          ],
          "summary": " The ABI function header.",
          "description": " The ABI function header.\n\n Includes several hidden function parameters that contract\n uses for security and replay protection reasons.\n\n The actual set of header fields depends on the contract's ABI."
        },
        {
          "name": "CallSet",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "function_name",
              "type": "String",
              "summary": " Function name that is being called.",
              "description": " Function name that is being called."
            },
            {
              "name": "header",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "FunctionHeader"
              },
              "summary": " Function header.",
              "description": " Function header.\n\n If an application omits some header parameters required by the\n contract's ABI, the library will set the default values for\n them."
            },
            {
              "name": "input",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "Value"
              },
              "summary": " Function input parameters according to ABI.",
              "description": " Function input parameters according to ABI."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "DeploySet",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "tvc",
              "type": "String",
              "summary": " Content of TVC file encoded in `base64`.",
              "description": " Content of TVC file encoded in `base64`."
            },
            {
              "name": "workchain_id",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": " Target workchain for destination address. Default is `0`.",
              "description": " Target workchain for destination address. Default is `0`."
            },
            {
              "name": "initial_data",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "Value"
              },
              "summary": " List of initial values for contract's public variables.",
              "description": " List of initial values for contract's public variables."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "Signer",
          "type": "EnumOfTypes",
          "enum_types": [
            {
              "name": "None",
              "type": "Struct",
              "struct_fields": [],
              "summary": " No keys are provided. Creates an unsigned message. ",
              "description": " No keys are provided. Creates an unsigned message. "
            },
            {
              "name": "External",
              "type": "Struct",
              "struct_fields": [
                {
                  "name": "public_key",
                  "type": "String",
                  "summary": null,
                  "description": null
                }
              ],
              "summary": " Only public key is provided to generate unsigned message and `data_to_sign`",
              "description": " Only public key is provided to generate unsigned message and `data_to_sign`\n which can be signed later.  "
            },
            {
              "name": "Keys",
              "type": "Struct",
              "struct_fields": [
                {
                  "name": "keys",
                  "type": "Ref",
                  "ref_name": "KeyPair",
                  "summary": null,
                  "description": null
                }
              ],
              "summary": " Key pair is provided for signing",
              "description": " Key pair is provided for signing"
            },
            {
              "name": "SigningBox",
              "type": "Struct",
              "struct_fields": [
                {
                  "name": "handle",
                  "type": "Ref",
                  "ref_name": "SigningBoxHandle",
                  "summary": null,
                  "description": null
                }
              ],
              "summary": " Signing Box interface is provided for signing, allows Dapps to sign messages using external APIs,",
              "description": " Signing Box interface is provided for signing, allows Dapps to sign messages using external APIs,\n such as HSM, cold wallet, etc."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "MessageBodyType",
          "type": "EnumOfConsts",
          "enum_consts": [
            {
              "name": "Input",
              "type": "None",
              "summary": " Message contains the input of the ABI function.",
              "description": " Message contains the input of the ABI function."
            },
            {
              "name": "Output",
              "type": "None",
              "summary": " Message contains the output of the ABI function.",
              "description": " Message contains the output of the ABI function."
            },
            {
              "name": "InternalOutput",
              "type": "None",
              "summary": " Message contains the input of the imported ABI function.",
              "description": " Message contains the input of the imported ABI function.\n\n Occurs when contract sends an internal message to other\n contract."
            },
            {
              "name": "Event",
              "type": "None",
              "summary": " Message contains the input of the ABI event.",
              "description": " Message contains the input of the ABI event."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "StateInitSource",
          "type": "EnumOfTypes",
          "enum_types": [
            {
              "name": "Message",
              "type": "Struct",
              "struct_fields": [
                {
                  "name": "source",
                  "type": "Ref",
                  "ref_name": "MessageSource",
                  "summary": null,
                  "description": null
                }
              ],
              "summary": " Deploy message.",
              "description": " Deploy message."
            },
            {
              "name": "StateInit",
              "type": "Struct",
              "struct_fields": [
                {
                  "name": "code",
                  "type": "String",
                  "summary": " Code BOC. Encoded in `base64`.",
                  "description": " Code BOC. Encoded in `base64`."
                },
                {
                  "name": "data",
                  "type": "String",
                  "summary": " Data BOC. Encoded in `base64`.",
                  "description": " Data BOC. Encoded in `base64`."
                },
                {
                  "name": "library",
                  "type": "Optional",
                  "optional_inner": {
                    "type": "String"
                  },
                  "summary": " Library BOC. Encoded in `base64`.",
                  "description": " Library BOC. Encoded in `base64`."
                }
              ],
              "summary": " State init data.",
              "description": " State init data."
            },
            {
              "name": "Tvc",
              "type": "Struct",
              "struct_fields": [
                {
                  "name": "tvc",
                  "type": "String",
                  "summary": null,
                  "description": null
                },
                {
                  "name": "public_key",
                  "type": "Optional",
                  "optional_inner": {
                    "type": "String"
                  },
                  "summary": null,
                  "description": null
                },
                {
                  "name": "init_params",
                  "type": "Optional",
                  "optional_inner": {
                    "type": "Ref",
                    "ref_name": "StateInitParams"
                  },
                  "summary": null,
                  "description": null
                }
              ],
              "summary": " Content of the TVC file. Encoded in `base64`.",
              "description": " Content of the TVC file. Encoded in `base64`."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "StateInitParams",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "abi",
              "type": "Ref",
              "ref_name": "Abi",
              "summary": null,
              "description": null
            },
            {
              "name": "value",
              "type": "Ref",
              "ref_name": "Value",
              "summary": null,
              "description": null
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "MessageSource",
          "type": "EnumOfTypes",
          "enum_types": [
            {
              "name": "Encoded",
              "type": "Struct",
              "struct_fields": [
                {
                  "name": "message",
                  "type": "String",
                  "summary": null,
                  "description": null
                },
                {
                  "name": "abi",
                  "type": "Optional",
                  "optional_inner": {
                    "type": "Ref",
                    "ref_name": "Abi"
                  },
                  "summary": null,
                  "description": null
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "EncodingParams",
              "type": "Struct",
              "struct_fields": [
                {
                  "name": "",
                  "type": "Ref",
                  "ref_name": "ParamsOfEncodeMessage",
                  "summary": null,
                  "description": null
                }
              ],
              "summary": null,
              "description": null
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfEncodeMessageBody",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "abi",
              "type": "Ref",
              "ref_name": "Abi",
              "summary": " Contract ABI.",
              "description": " Contract ABI."
            },
            {
              "name": "call_set",
              "type": "Ref",
              "ref_name": "CallSet",
              "summary": " Function call parameters.",
              "description": " Function call parameters.\n\n Must be specified in non deploy message.\n\n In case of deploy message contains parameters of constructor."
            },
            {
              "name": "is_internal",
              "type": "Boolean",
              "summary": " True if internal message body must be encoded.",
              "description": " True if internal message body must be encoded."
            },
            {
              "name": "signer",
              "type": "Ref",
              "ref_name": "Signer",
              "summary": " Signing parameters.",
              "description": " Signing parameters."
            },
            {
              "name": "processing_try_index",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": " Processing try index.",
              "description": " Processing try index.\n\n Used in message processing with retries.\n\n Encoder uses the provided try index to calculate message\n expiration time.\n\n Expiration timeouts will grow with every retry.\n\n Default value is 0."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfEncodeMessageBody",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "body",
              "type": "String",
              "summary": " Message body BOC encoded with `base64`.",
              "description": " Message body BOC encoded with `base64`."
            },
            {
              "name": "data_to_sign",
              "type": "Optional",
              "optional_inner": {
                "type": "String"
              },
              "summary": " Optional data to sign. Encoded with `base64`.",
              "description": " Optional data to sign. Encoded with `base64`.\n\n Presents when `message` is unsigned. Can be used for external\n message signing. Is this case you need to sing this data and\n produce signed message using `abi.attach_signature`."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfAttachSignatureToMessageBody",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "abi",
              "type": "Ref",
              "ref_name": "Abi",
              "summary": " Contract ABI",
              "description": " Contract ABI"
            },
            {
              "name": "public_key",
              "type": "String",
              "summary": " Public key. Must be encoded with `hex`.",
              "description": " Public key. Must be encoded with `hex`."
            },
            {
              "name": "message",
              "type": "String",
              "summary": " Unsigned message BOC. Must be encoded with `base64`.",
              "description": " Unsigned message BOC. Must be encoded with `base64`."
            },
            {
              "name": "signature",
              "type": "String",
              "summary": " Signature. Must be encoded with `hex`.",
              "description": " Signature. Must be encoded with `hex`."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfAttachSignatureToMessageBody",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "body",
              "type": "String",
              "summary": null,
              "description": null
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfEncodeMessage",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "abi",
              "type": "Ref",
              "ref_name": "Abi",
              "summary": " Contract ABI.",
              "description": " Contract ABI."
            },
            {
              "name": "address",
              "type": "Optional",
              "optional_inner": {
                "type": "String"
              },
              "summary": " Target address the message will be sent to.",
              "description": " Target address the message will be sent to.\n\n Must be specified in case of non-deploy message."
            },
            {
              "name": "deploy_set",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "DeploySet"
              },
              "summary": " Deploy parameters.",
              "description": " Deploy parameters.\n\n Must be specified in case of deploy message."
            },
            {
              "name": "call_set",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "CallSet"
              },
              "summary": " Function call parameters.",
              "description": " Function call parameters.\n\n Must be specified in case of non-deploy message.\n\n In case of deploy message it is optional and contains parameters\n of the functions that will to be called upon deploy transaction."
            },
            {
              "name": "signer",
              "type": "Ref",
              "ref_name": "Signer",
              "summary": " Signing parameters.",
              "description": " Signing parameters."
            },
            {
              "name": "processing_try_index",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": " Processing try index.",
              "description": " Processing try index.\n\n Used in message processing with retries (if contract's ABI includes \"expire\" header).\n\n Encoder uses the provided try index to calculate message\n expiration time. The 1st message expiration time is specified in\n Client config.\n\n Expiration timeouts will grow with every retry.\n Retry grow factor is set in Client config:\n <.....add config parameter with default value here>\n\n Default value is 0."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfEncodeMessage",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "message",
              "type": "String",
              "summary": " Message BOC encoded with `base64`.",
              "description": " Message BOC encoded with `base64`."
            },
            {
              "name": "data_to_sign",
              "type": "Optional",
              "optional_inner": {
                "type": "String"
              },
              "summary": " Optional data to be signed encoded in `base64`.",
              "description": " Optional data to be signed encoded in `base64`.\n\n Returned in case of `Signer::External`. Can be used for external\n message signing. Is this case you need to use this data to create signature and\n then produce signed message using `abi.attach_signature`."
            },
            {
              "name": "address",
              "type": "String",
              "summary": " Destination address.",
              "description": " Destination address."
            },
            {
              "name": "message_id",
              "type": "String",
              "summary": " Message id.",
              "description": " Message id."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfAttachSignature",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "abi",
              "type": "Ref",
              "ref_name": "Abi",
              "summary": " Contract ABI",
              "description": " Contract ABI"
            },
            {
              "name": "public_key",
              "type": "String",
              "summary": " Public key encoded in `hex`.",
              "description": " Public key encoded in `hex`."
            },
            {
              "name": "message",
              "type": "String",
              "summary": " Unsigned message BOC encoded in `base64`.",
              "description": " Unsigned message BOC encoded in `base64`."
            },
            {
              "name": "signature",
              "type": "String",
              "summary": " Signature encoded in `hex`.",
              "description": " Signature encoded in `hex`."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfAttachSignature",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "message",
              "type": "String",
              "summary": " Signed message BOC",
              "description": " Signed message BOC"
            },
            {
              "name": "message_id",
              "type": "String",
              "summary": " Message ID",
              "description": " Message ID"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfDecodeMessage",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "abi",
              "type": "Ref",
              "ref_name": "Abi",
              "summary": " contract ABI",
              "description": " contract ABI"
            },
            {
              "name": "message",
              "type": "String",
              "summary": " Message BOC",
              "description": " Message BOC"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "DecodedMessageBody",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "body_type",
              "type": "Ref",
              "ref_name": "MessageBodyType",
              "summary": " Type of the message body content.",
              "description": " Type of the message body content."
            },
            {
              "name": "name",
              "type": "String",
              "summary": " Function or event name.",
              "description": " Function or event name."
            },
            {
              "name": "value",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "Value"
              },
              "summary": " Parameters or result value.",
              "description": " Parameters or result value."
            },
            {
              "name": "header",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "FunctionHeader"
              },
              "summary": " Function header.",
              "description": " Function header."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfDecodeMessageBody",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "abi",
              "type": "Ref",
              "ref_name": "Abi",
              "summary": " Contract ABI used to decode.",
              "description": " Contract ABI used to decode."
            },
            {
              "name": "body",
              "type": "String",
              "summary": " Message body BOC encoded in `base64`.",
              "description": " Message body BOC encoded in `base64`."
            },
            {
              "name": "is_internal",
              "type": "Boolean",
              "summary": " True if the body belongs to the internal message.",
              "description": " True if the body belongs to the internal message."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfEncodeAccount",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "state_init",
              "type": "Ref",
              "ref_name": "StateInitSource",
              "summary": " Source of the account state init.",
              "description": " Source of the account state init."
            },
            {
              "name": "balance",
              "type": "Optional",
              "optional_inner": {
                "type": "BigInt"
              },
              "summary": " Initial balance.",
              "description": " Initial balance."
            },
            {
              "name": "last_trans_lt",
              "type": "Optional",
              "optional_inner": {
                "type": "BigInt"
              },
              "summary": " Initial value for the `last_trans_lt`.",
              "description": " Initial value for the `last_trans_lt`."
            },
            {
              "name": "last_paid",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": " Initial value for the `last_paid`.",
              "description": " Initial value for the `last_paid`."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfEncodeAccount",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "account",
              "type": "String",
              "summary": " Account BOC encoded in `base64`.",
              "description": " Account BOC encoded in `base64`."
            },
            {
              "name": "id",
              "type": "String",
              "summary": " Account ID  encoded in `hex`.",
              "description": " Account ID  encoded in `hex`."
            }
          ],
          "summary": null,
          "description": null
        }
      ],
      "functions": [
        {
          "name": "encode_message_body",
          "summary": " Encodes message body according to ABI function call.",
          "description": " Encodes message body according to ABI function call.",
          "params": [
            {
              "name": "context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfEncodeMessageBody",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfEncodeMessageBody"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "attach_signature_to_message_body",
          "summary": null,
          "description": null,
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfAttachSignatureToMessageBody",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfAttachSignatureToMessageBody"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "encode_message",
          "summary": " Encodes an ABI-compatible message",
          "description": " Encodes an ABI-compatible message\n\n Allows to encode deploy and function call messages,\n both signed and unsigned.\n\n Use cases include messages of any possible type:\n - deploy with initial function call (i.e. `constructor` or any other function that is used for some kind\n of initialization);\n - deploy without initial function call;\n - signed/unsigned + data for signing.\n\n `Signer` defines how the message should or shouldn't be signed:\n\n `Signer::None` creates an unsigned message. This may be needed in case of some public methods,\n that do not require authorization by pubkey.\n\n `Signer::External` takes public key and returns `data_to_sign` for later signing.\n Use `attach_signature` method with the result signature to get the signed message.\n\n `Signer::Keys` creates a signed message with provided key pair.\n\n [SOON] `Signer::SigningBox` Allows using a special interface to imlepement signing\n without private key disclosure to SDK. For instance, in case of using a cold wallet or HSM,\n when application calls some API to sign data.",
          "params": [
            {
              "name": "context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfEncodeMessage",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfEncodeMessage"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "attach_signature",
          "summary": " Combines `hex`-encoded `signature` with `base64`-encoded `unsigned_message`.",
          "description": " Combines `hex`-encoded `signature` with `base64`-encoded `unsigned_message`.\n Returns signed message encoded in `base64`.",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfAttachSignature",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfAttachSignature"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "decode_message",
          "summary": " Decodes message body using provided message BOC and ABI.",
          "description": " Decodes message body using provided message BOC and ABI.",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfDecodeMessage",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "DecodedMessageBody"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "decode_message_body",
          "summary": " Decodes message body using provided body BOC and ABI.",
          "description": " Decodes message body using provided body BOC and ABI.",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfDecodeMessageBody",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "DecodedMessageBody"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "encode_account",
          "summary": " Creates account state BOC",
          "description": " Creates account state BOC\n \n Creates account state provided with one of these sets of data :\n 1. BOC of code, BOC of data, BOC of library\n 2. TVC (string in `base64`), keys, init params",
          "params": [
            {
              "name": "context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfEncodeAccount",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfEncodeAccount"
              }
            ]
          },
          "errors": null
        }
      ]
    },
    {
      "name": "boc",
      "summary": " BOC manipulation module.",
      "description": " BOC manipulation module.",
      "types": [
        {
          "name": "ParamsOfParse",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "boc",
              "type": "String",
              "summary": " BOC encoded as base64",
              "description": " BOC encoded as base64"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfParse",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "parsed",
              "type": "Ref",
              "ref_name": "Value",
              "summary": " JSON containing parsed BOC",
              "description": " JSON containing parsed BOC"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfGetBlockchainConfig",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "block_boc",
              "type": "String",
              "summary": " Key block BOC encoded as base64",
              "description": " Key block BOC encoded as base64"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfGetBlockchainConfig",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "config_boc",
              "type": "String",
              "summary": " Blockchain config BOC encoded as base64",
              "description": " Blockchain config BOC encoded as base64"
            }
          ],
          "summary": null,
          "description": null
        }
      ],
      "functions": [
        {
          "name": "parse_message",
          "summary": " Parses message boc into a JSON ",
          "description": " Parses message boc into a JSON \n \n JSON structure is compatible with GraphQL API message object",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfParse",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfParse"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "parse_transaction",
          "summary": " Parses transaction boc into a JSON ",
          "description": " Parses transaction boc into a JSON \n \n JSON structure is compatible with GraphQL API transaction object",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfParse",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfParse"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "parse_account",
          "summary": " Parses account boc into a JSON ",
          "description": " Parses account boc into a JSON \n \n JSON structure is compatible with GraphQL API account object",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfParse",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfParse"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "parse_block",
          "summary": " Parses block boc into a JSON ",
          "description": " Parses block boc into a JSON \n \n JSON structure is compatible with GraphQL API block object",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfParse",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfParse"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "get_blockchain_config",
          "summary": null,
          "description": null,
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfGetBlockchainConfig",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfGetBlockchainConfig"
              }
            ]
          },
          "errors": null
        }
      ]
    },
    {
      "name": "processing",
      "summary": " Message processing module.",
      "description": " Message processing module.\n\n This module incorporates functions related to complex message\n processing scenarios.",
      "types": [
        {
          "name": "ProcessingEvent",
          "type": "EnumOfTypes",
          "enum_types": [
            {
              "name": "WillFetchFirstBlock",
              "type": "Struct",
              "struct_fields": [],
              "summary": " Notifies the app that the current shard block will be fetched",
              "description": " Notifies the app that the current shard block will be fetched\n from the network.\n\n Fetched block will be used later in waiting phase."
            },
            {
              "name": "FetchFirstBlockFailed",
              "type": "Struct",
              "struct_fields": [
                {
                  "name": "error",
                  "type": "Ref",
                  "ref_name": "ClientError",
                  "summary": null,
                  "description": null
                }
              ],
              "summary": " Notifies the app that the client has failed to fetch current",
              "description": " Notifies the app that the client has failed to fetch current\n shard block.\n\n Message processing has finished."
            },
            {
              "name": "WillSend",
              "type": "Struct",
              "struct_fields": [
                {
                  "name": "shard_block_id",
                  "type": "String",
                  "summary": null,
                  "description": null
                },
                {
                  "name": "message_id",
                  "type": "String",
                  "summary": null,
                  "description": null
                },
                {
                  "name": "message",
                  "type": "String",
                  "summary": null,
                  "description": null
                }
              ],
              "summary": " Notifies the app that the message will be sent to the",
              "description": " Notifies the app that the message will be sent to the\n network."
            },
            {
              "name": "DidSend",
              "type": "Struct",
              "struct_fields": [
                {
                  "name": "shard_block_id",
                  "type": "String",
                  "summary": null,
                  "description": null
                },
                {
                  "name": "message_id",
                  "type": "String",
                  "summary": null,
                  "description": null
                },
                {
                  "name": "message",
                  "type": "String",
                  "summary": null,
                  "description": null
                }
              ],
              "summary": " Notifies the app that the message was sent to the network.",
              "description": " Notifies the app that the message was sent to the network."
            },
            {
              "name": "SendFailed",
              "type": "Struct",
              "struct_fields": [
                {
                  "name": "shard_block_id",
                  "type": "String",
                  "summary": null,
                  "description": null
                },
                {
                  "name": "message_id",
                  "type": "String",
                  "summary": null,
                  "description": null
                },
                {
                  "name": "message",
                  "type": "String",
                  "summary": null,
                  "description": null
                },
                {
                  "name": "error",
                  "type": "Ref",
                  "ref_name": "ClientError",
                  "summary": null,
                  "description": null
                }
              ],
              "summary": " Notifies the app that the sending operation was failed with",
              "description": " Notifies the app that the sending operation was failed with\n network error.\n\n Nevertheless the processing will be continued at the waiting\n phase because the message possibly has been delivered to the\n node."
            },
            {
              "name": "WillFetchNextBlock",
              "type": "Struct",
              "struct_fields": [
                {
                  "name": "shard_block_id",
                  "type": "String",
                  "summary": null,
                  "description": null
                },
                {
                  "name": "message_id",
                  "type": "String",
                  "summary": null,
                  "description": null
                },
                {
                  "name": "message",
                  "type": "String",
                  "summary": null,
                  "description": null
                }
              ],
              "summary": " Notifies the app that the next shard block will be fetched",
              "description": " Notifies the app that the next shard block will be fetched\n from the network.\n\n Event can occurs more than one time due to block walking\n procedure."
            },
            {
              "name": "FetchNextBlockFailed",
              "type": "Struct",
              "struct_fields": [
                {
                  "name": "shard_block_id",
                  "type": "String",
                  "summary": null,
                  "description": null
                },
                {
                  "name": "message_id",
                  "type": "String",
                  "summary": null,
                  "description": null
                },
                {
                  "name": "message",
                  "type": "String",
                  "summary": null,
                  "description": null
                },
                {
                  "name": "error",
                  "type": "Ref",
                  "ref_name": "ClientError",
                  "summary": null,
                  "description": null
                }
              ],
              "summary": " Notifies the app that the next block can't be fetched due to",
              "description": " Notifies the app that the next block can't be fetched due to\n error.\n\n Processing will be continued after `network_resume_timeout`."
            },
            {
              "name": "MessageExpired",
              "type": "Struct",
              "struct_fields": [
                {
                  "name": "message_id",
                  "type": "String",
                  "summary": null,
                  "description": null
                },
                {
                  "name": "message",
                  "type": "String",
                  "summary": null,
                  "description": null
                },
                {
                  "name": "error",
                  "type": "Ref",
                  "ref_name": "ClientError",
                  "summary": null,
                  "description": null
                }
              ],
              "summary": " Notifies the app that the message was expired.",
              "description": " Notifies the app that the message was expired.\n\n Event occurs for contracts which ABI includes header \"expire\"\n\n Processing will be continued from encoding phase after\n `expiration_retries_timeout`."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfProcessMessage",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "transaction",
              "type": "Ref",
              "ref_name": "Value",
              "summary": " Parsed transaction.",
              "description": " Parsed transaction.\n\n In addition to the regular transaction fields there is a\n `boc` field encoded with `base64` which contains source\n transaction BOC."
            },
            {
              "name": "out_messages",
              "type": "Array",
              "array_item": {
                "type": "String"
              },
              "summary": " List of output messages' BOCs. Encoded as `base64`",
              "description": " List of output messages' BOCs. Encoded as `base64`"
            },
            {
              "name": "decoded",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "DecodedOutput"
              },
              "summary": " Optional decoded message bodies according to the optional",
              "description": " Optional decoded message bodies according to the optional\n `abi` parameter."
            },
            {
              "name": "fees",
              "type": "Ref",
              "ref_name": "TransactionFees",
              "summary": " Transaction fees",
              "description": " Transaction fees"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "DecodedOutput",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "out_messages",
              "type": "Array",
              "array_item": {
                "type": "Optional",
                "optional_inner": {
                  "type": "Ref",
                  "ref_name": "DecodedMessageBody"
                }
              },
              "summary": " Decoded bodies of the out messages.",
              "description": " Decoded bodies of the out messages.\n\n If the message can't be decoded then `None` will be stored in\n the appropriate position."
            },
            {
              "name": "output",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "Value"
              },
              "summary": " Decoded body of the function output message.",
              "description": " Decoded body of the function output message."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfSendMessage",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "message",
              "type": "String",
              "summary": " Message BOC.",
              "description": " Message BOC."
            },
            {
              "name": "abi",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "Abi"
              },
              "summary": " Optional message ABI.",
              "description": " Optional message ABI.\n\n If this parameter is specified and the message has the\n `expire` header then expiration time will be checked against\n the current time to prevent an unnecessary sending of already expired message.\n\n The `message already expired` error will be returned in this\n case.\n\n Note that specifying `abi` for ABI compliant contracts is\n strongly recommended due to choosing proper processing\n strategy."
            },
            {
              "name": "send_events",
              "type": "Boolean",
              "summary": " Flag for requesting events sending",
              "description": " Flag for requesting events sending"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfSendMessage",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "shard_block_id",
              "type": "String",
              "summary": " The last generated shard block of the message destination account before the",
              "description": " The last generated shard block of the message destination account before the\n message was sent.\n\n This block id must be used as a parameter of the\n `wait_for_transaction`."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfWaitForTransaction",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "abi",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "Abi"
              },
              "summary": " Optional ABI for decoding the transaction result.",
              "description": " Optional ABI for decoding the transaction result.\n\n If it is specified then the output messages' bodies will be\n decoded according to this ABI.\n\n The `abi_decoded` result field will be filled out."
            },
            {
              "name": "message",
              "type": "String",
              "summary": " Message BOC. Encoded with `base64`.",
              "description": " Message BOC. Encoded with `base64`."
            },
            {
              "name": "shard_block_id",
              "type": "String",
              "summary": " The last generated block id of the destination account shard before the message was sent.",
              "description": " The last generated block id of the destination account shard before the message was sent.\n\n You must provide the same value as the `send_message` has returned."
            },
            {
              "name": "send_events",
              "type": "Boolean",
              "summary": " Flag that enables/disables intermediate events",
              "description": " Flag that enables/disables intermediate events"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfProcessMessage",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "message_encode_params",
              "type": "Ref",
              "ref_name": "ParamsOfEncodeMessage",
              "summary": " Message encode parameters.",
              "description": " Message encode parameters."
            },
            {
              "name": "send_events",
              "type": "Boolean",
              "summary": " Flag for requesting events sending",
              "description": " Flag for requesting events sending"
            }
          ],
          "summary": null,
          "description": null
        }
      ],
      "functions": [
        {
          "name": "send_message",
          "summary": " Sends message to the network",
          "description": " Sends message to the network\n \n Sends message to the network and returns the last generated shard block of the destination account\n before the message was sent. It will be required later for message processing.",
          "params": [
            {
              "name": "context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfSendMessage",
              "summary": null,
              "description": null
            },
            {
              "name": "callback",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "Request"
                }
              ],
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfSendMessage"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "wait_for_transaction",
          "summary": " Performs monitoring of the network for the result transaction",
          "description": " Performs monitoring of the network for the result transaction\n of the external inbound message processing.\n \n `send_events` enables intermediate events, such as `WillFetchNextBlock`,\n `FetchNextBlockFailed` that may be useful for logging of new shard blocks creation \n during message processing.\n\n Note that presence of the `abi` parameter is critical for ABI\n compliant contracts. Message processing uses drastically\n different strategy for processing message for contracts which\n ABI includes \"expire\" header.\n\n When the ABI header `expire` is present, the processing uses\n `message expiration` strategy:\n - The maximum block gen time is set to\n   `message_expiration_time + transaction_wait_timeout`.\n - When maximum block gen time is reached the processing will\n   be finished with `MessageExpired` error.\n\n When the ABI header `expire` isn't present or `abi` parameter\n isn't specified, the processing uses `transaction waiting`\n strategy:\n - The maximum block gen time is set to\n   `now() + transaction_wait_timeout`.\n \n - If maximum block gen time is reached and no result transaction is found \n the processing will exit with an error.",
          "params": [
            {
              "name": "context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfWaitForTransaction",
              "summary": null,
              "description": null
            },
            {
              "name": "callback",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "Request"
                }
              ],
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfProcessMessage"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "process_message",
          "summary": " Creates message, sends it to the network and monitors its processing.",
          "description": " Creates message, sends it to the network and monitors its processing.\n \n Creates ABI-compatible message,\n sends it to the network and monitors for the result transaction.\n Decodes the output messages's bodies.\n \n If contract's ABI includes \"expire\" header then\n SDK implements retries in case of unsuccessful message delivery within the expiration\n timeout: SDK recreates the message, sends it and processes it again. \n \n The intermediate events, such as `WillFetchFirstBlock`, `WillSend`, `DidSend`,\n `WillFetchNextBlock`, etc - are switched on/off by `send_events` flag \n and logged into the supplied callback function.\n The retry configuration parameters are defined in config:\n <add correct config params here>\n pub const DEFAULT_EXPIRATION_RETRIES_LIMIT: i8 = 3; - max number of retries\n pub const DEFAULT_EXPIRATION_TIMEOUT: u32 = 40000;  - message expiration timeout in ms.\n pub const DEFAULT_....expiration_timeout_grow_factor... = 1.5 - factor that increases the expiration timeout for each retry\n \n If contract's ABI does not include \"expire\" header\n then if no transaction is found within the network timeout (see config parameter ), exits with error.",
          "params": [
            {
              "name": "context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfProcessMessage",
              "summary": null,
              "description": null
            },
            {
              "name": "request",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "Request"
                }
              ],
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfProcessMessage"
              }
            ]
          },
          "errors": null
        }
      ]
    },
    {
      "name": "utils",
      "summary": " Misc utility Functions.",
      "description": " Misc utility Functions.",
      "types": [
        {
          "name": "AddressStringFormat",
          "type": "EnumOfTypes",
          "enum_types": [
            {
              "name": "AccountId",
              "type": "Struct",
              "struct_fields": [],
              "summary": null,
              "description": null
            },
            {
              "name": "Hex",
              "type": "Struct",
              "struct_fields": [],
              "summary": null,
              "description": null
            },
            {
              "name": "Base64",
              "type": "Struct",
              "struct_fields": [
                {
                  "name": "url",
                  "type": "Boolean",
                  "summary": null,
                  "description": null
                },
                {
                  "name": "test",
                  "type": "Boolean",
                  "summary": null,
                  "description": null
                },
                {
                  "name": "bounce",
                  "type": "Boolean",
                  "summary": null,
                  "description": null
                }
              ],
              "summary": null,
              "description": null
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfConvertAddress",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "address",
              "type": "String",
              "summary": " Account address in any TON format.",
              "description": " Account address in any TON format."
            },
            {
              "name": "output_format",
              "type": "Ref",
              "ref_name": "AddressStringFormat",
              "summary": " Specify the format to convert to.",
              "description": " Specify the format to convert to."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfConvertAddress",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "address",
              "type": "String",
              "summary": " Address in the specified format",
              "description": " Address in the specified format"
            }
          ],
          "summary": null,
          "description": null
        }
      ],
      "functions": [
        {
          "name": "convert_address",
          "summary": " Converts address from any TON format to any TON format",
          "description": " Converts address from any TON format to any TON format",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfConvertAddress",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfConvertAddress"
              }
            ]
          },
          "errors": null
        }
      ]
    },
    {
      "name": "tvm",
      "summary": null,
      "description": null,
      "types": [
        {
          "name": "ExecutionOptions",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "blockchain_config",
              "type": "Optional",
              "optional_inner": {
                "type": "String"
              },
              "summary": " boc with config",
              "description": " boc with config"
            },
            {
              "name": "block_time",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": " time that is used as transaction time",
              "description": " time that is used as transaction time"
            },
            {
              "name": "block_lt",
              "type": "Optional",
              "optional_inner": {
                "type": "BigInt"
              },
              "summary": " block logical time",
              "description": " block logical time"
            },
            {
              "name": "transaction_lt",
              "type": "Optional",
              "optional_inner": {
                "type": "BigInt"
              },
              "summary": " transaction logical time",
              "description": " transaction logical time"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "AccountForExecutor",
          "type": "EnumOfTypes",
          "enum_types": [
            {
              "name": "None",
              "type": "Struct",
              "struct_fields": [],
              "summary": " Non-existing account to run a creation internal message.",
              "description": " Non-existing account to run a creation internal message.\n Should be used with `skip_transaction_check = true` if the message has no deploy data\n since transaction on the unitialized account are always aborted"
            },
            {
              "name": "Uninit",
              "type": "Struct",
              "struct_fields": [],
              "summary": " Emulate unitialized account to run deploy message",
              "description": " Emulate unitialized account to run deploy message"
            },
            {
              "name": "Account",
              "type": "Struct",
              "struct_fields": [
                {
                  "name": "boc",
                  "type": "String",
                  "summary": " Account BOC. Encoded as base64.",
                  "description": " Account BOC. Encoded as base64."
                },
                {
                  "name": "unlimited_balance",
                  "type": "Optional",
                  "optional_inner": {
                    "type": "Boolean"
                  },
                  "summary": " Flag for running account with the unlimited balance. Can be used to calculate",
                  "description": " Flag for running account with the unlimited balance. Can be used to calculate\n transaction fees without balance check"
                }
              ],
              "summary": " Account state to run message",
              "description": " Account state to run message"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfRunExecutor",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "message",
              "type": "String",
              "summary": " Input message BOC. Must be encoded as base64.",
              "description": " Input message BOC. Must be encoded as base64."
            },
            {
              "name": "account",
              "type": "Ref",
              "ref_name": "AccountForExecutor",
              "summary": " Account to run on executor",
              "description": " Account to run on executor"
            },
            {
              "name": "execution_options",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "ExecutionOptions"
              },
              "summary": " Execution options.",
              "description": " Execution options."
            },
            {
              "name": "abi",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "Abi"
              },
              "summary": " Contract ABI for decoding output messages",
              "description": " Contract ABI for decoding output messages"
            },
            {
              "name": "skip_transaction_check",
              "type": "Optional",
              "optional_inner": {
                "type": "Boolean"
              },
              "summary": " Skip transaction check flag",
              "description": " Skip transaction check flag"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfRunExecutor",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "transaction",
              "type": "Ref",
              "ref_name": "Value",
              "summary": " Parsed transaction.",
              "description": " Parsed transaction.\n\n In addition to the regular transaction fields there is a\n `boc` field encoded with `base64` which contains source\n transaction BOC."
            },
            {
              "name": "out_messages",
              "type": "Array",
              "array_item": {
                "type": "String"
              },
              "summary": " List of output messages' BOCs. Encoded as `base64`",
              "description": " List of output messages' BOCs. Encoded as `base64`"
            },
            {
              "name": "decoded",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "DecodedOutput"
              },
              "summary": " Optional decoded message bodies according to the optional",
              "description": " Optional decoded message bodies according to the optional\n `abi` parameter."
            },
            {
              "name": "account",
              "type": "String",
              "summary": " Updated account state BOC. Encoded as `base64`",
              "description": " Updated account state BOC. Encoded as `base64`"
            },
            {
              "name": "fees",
              "type": "Ref",
              "ref_name": "TransactionFees",
              "summary": " Transaction fees",
              "description": " Transaction fees"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfRunTvm",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "message",
              "type": "String",
              "summary": " Input message BOC. Must be encoded as base64.",
              "description": " Input message BOC. Must be encoded as base64."
            },
            {
              "name": "account",
              "type": "String",
              "summary": " Account BOC. Must be encoded as base64.",
              "description": " Account BOC. Must be encoded as base64."
            },
            {
              "name": "execution_options",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "ExecutionOptions"
              },
              "summary": " Execution options.",
              "description": " Execution options."
            },
            {
              "name": "abi",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "Abi"
              },
              "summary": " Contract ABI for dedcoding output messages",
              "description": " Contract ABI for dedcoding output messages"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfRunTvm",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "out_messages",
              "type": "Array",
              "array_item": {
                "type": "String"
              },
              "summary": " List of output messages' BOCs. Encoded as `base64`",
              "description": " List of output messages' BOCs. Encoded as `base64`"
            },
            {
              "name": "decoded",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "DecodedOutput"
              },
              "summary": " Optional decoded message bodies according to the optional",
              "description": " Optional decoded message bodies according to the optional\n `abi` parameter."
            },
            {
              "name": "account",
              "type": "String",
              "summary": " Updated account state BOC. Encoded as `base64`.",
              "description": " Updated account state BOC. Encoded as `base64`.\n Attention! Only data in account state is updated."
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfRunGet",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "account",
              "type": "String",
              "summary": " Account BOC in `base64`",
              "description": " Account BOC in `base64`"
            },
            {
              "name": "function_name",
              "type": "String",
              "summary": " Function name",
              "description": " Function name"
            },
            {
              "name": "input",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "Value"
              },
              "summary": " Input parameters",
              "description": " Input parameters"
            },
            {
              "name": "execution_options",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "ExecutionOptions"
              },
              "summary": null,
              "description": null
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfRunGet",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "output",
              "type": "Ref",
              "ref_name": "Value",
              "summary": " Values returned by getmethod on stack",
              "description": " Values returned by getmethod on stack"
            }
          ],
          "summary": null,
          "description": null
        }
      ],
      "functions": [
        {
          "name": "run_executor",
          "summary": null,
          "description": null,
          "params": [
            {
              "name": "context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfRunExecutor",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfRunExecutor"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "run_tvm",
          "summary": null,
          "description": null,
          "params": [
            {
              "name": "context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfRunTvm",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfRunTvm"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "run_get",
          "summary": " Executes getmethod and returns data from TVM stack",
          "description": " Executes getmethod and returns data from TVM stack",
          "params": [
            {
              "name": "context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfRunGet",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfRunGet"
              }
            ]
          },
          "errors": null
        }
      ]
    },
    {
      "name": "net",
      "summary": " Network access.",
      "description": " Network access.",
      "types": [
        {
          "name": "OrderBy",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "path",
              "type": "String",
              "summary": null,
              "description": null
            },
            {
              "name": "direction",
              "type": "Ref",
              "ref_name": "SortDirection",
              "summary": null,
              "description": null
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "SortDirection",
          "type": "EnumOfConsts",
          "enum_consts": [
            {
              "name": "ASC",
              "type": "None",
              "summary": null,
              "description": null
            },
            {
              "name": "DESC",
              "type": "None",
              "summary": null,
              "description": null
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfQueryCollection",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "collection",
              "type": "String",
              "summary": " Collection name (accounts, blocks, transactions, messages, block_signatures)",
              "description": " Collection name (accounts, blocks, transactions, messages, block_signatures)"
            },
            {
              "name": "filter",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "Value"
              },
              "summary": " Collection filter",
              "description": " Collection filter"
            },
            {
              "name": "result",
              "type": "String",
              "summary": " Projection (result) string",
              "description": " Projection (result) string"
            },
            {
              "name": "order",
              "type": "Optional",
              "optional_inner": {
                "type": "Array",
                "array_item": {
                  "type": "Ref",
                  "ref_name": "OrderBy"
                }
              },
              "summary": " Sorting order",
              "description": " Sorting order"
            },
            {
              "name": "limit",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": " Number of documents to return",
              "description": " Number of documents to return"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfQueryCollection",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "result",
              "type": "Array",
              "array_item": {
                "type": "Ref",
                "ref_name": "Value"
              },
              "summary": " Objects that match the provided criteria",
              "description": " Objects that match the provided criteria"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfWaitForCollection",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "collection",
              "type": "String",
              "summary": " Collection name (accounts, blocks, transactions, messages, block_signatures)",
              "description": " Collection name (accounts, blocks, transactions, messages, block_signatures)"
            },
            {
              "name": "filter",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "Value"
              },
              "summary": " Collection filter",
              "description": " Collection filter"
            },
            {
              "name": "result",
              "type": "String",
              "summary": " Projection (result) string",
              "description": " Projection (result) string"
            },
            {
              "name": "timeout",
              "type": "Optional",
              "optional_inner": {
                "type": "Number"
              },
              "summary": " Query timeout",
              "description": " Query timeout"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfWaitForCollection",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "result",
              "type": "Ref",
              "ref_name": "Value",
              "summary": " First found object that matches the provided criteria",
              "description": " First found object that matches the provided criteria"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "ResultOfSubscribeCollection",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "handle",
              "type": "Number",
              "summary": " Subscription handle. Must be closed with `unsubscribe`",
              "description": " Subscription handle. Must be closed with `unsubscribe`"
            }
          ],
          "summary": null,
          "description": null
        },
        {
          "name": "unit",
          "type": "None",
          "summary": null,
          "description": null
        },
        {
          "name": "ParamsOfSubscribeCollection",
          "type": "Struct",
          "struct_fields": [
            {
              "name": "collection",
              "type": "String",
              "summary": " Collection name (accounts, blocks, transactions, messages, block_signatures)",
              "description": " Collection name (accounts, blocks, transactions, messages, block_signatures)"
            },
            {
              "name": "filter",
              "type": "Optional",
              "optional_inner": {
                "type": "Ref",
                "ref_name": "Value"
              },
              "summary": " Collection filter",
              "description": " Collection filter"
            },
            {
              "name": "result",
              "type": "String",
              "summary": " Projection (result) string",
              "description": " Projection (result) string"
            }
          ],
          "summary": null,
          "description": null
        }
      ],
      "functions": [
        {
          "name": "query_collection",
          "summary": " Queries collection data",
          "description": " Queries collection data\n\n Queries data that satisfies the `filter` conditions,\n limits the number of returned records and orders them.\n The projection fields are limited to  `result` fields",
          "params": [
            {
              "name": "context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfQueryCollection",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfQueryCollection"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "wait_for_collection",
          "summary": " Returns an object that fulfills the conditions or waits for its appearance",
          "description": " Returns an object that fulfills the conditions or waits for its appearance\n\n Triggers only once.\n If object that satisfies the `filter` conditions\n already exists - returns it immediately.\n If not - waits for insert/update of data withing the specified `timeout`,\n and returns it.\n The projection fields are limited to  `result` fields",
          "params": [
            {
              "name": "context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfWaitForCollection",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfWaitForCollection"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "unsubscribe",
          "summary": " Cancels a subscription",
          "description": " Cancels a subscription\n\n Cancels a subscription specified by its handle.",
          "params": [
            {
              "name": "_context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ResultOfSubscribeCollection",
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "None"
              }
            ]
          },
          "errors": null
        },
        {
          "name": "subscribe_collection",
          "summary": " Creates a subscription",
          "description": " Creates a subscription\n \n Triggers for each insert/update of data\n that satisfies the `filter` conditions.\n The projection fields are limited to  `result` fields.",
          "params": [
            {
              "name": "context",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "ClientContext"
                }
              ],
              "summary": null,
              "description": null
            },
            {
              "name": "params",
              "type": "Ref",
              "ref_name": "ParamsOfSubscribeCollection",
              "summary": null,
              "description": null
            },
            {
              "name": "callback",
              "type": "Generic",
              "generic_name": "Arc",
              "generic_args": [
                {
                  "type": "Ref",
                  "ref_name": "Request"
                }
              ],
              "summary": null,
              "description": null
            }
          ],
          "result": {
            "type": "Generic",
            "generic_name": "ClientResult",
            "generic_args": [
              {
                "type": "Ref",
                "ref_name": "ResultOfSubscribeCollection"
              }
            ]
          },
          "errors": null
        }
      ]
    }
  ]
}